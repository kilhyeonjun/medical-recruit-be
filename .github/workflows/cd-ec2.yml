name: CI/CD Pipeline

on:
  push:
    branches:
      - master
      - test/prod-ec2-cd
    paths-ignore:
      - README.md

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      # - name: Run tests
      #   run: pnpm test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/medi-recruit:latest

      - name: Verify Docker image
        run: |
          docker pull ${{ secrets.DOCKER_USERNAME }}/medi-recruit:latest
          docker create --name temp_container ${{ secrets.DOCKER_USERNAME }}/medi-recruit:latest
          docker cp temp_container:/app/dist ./dist
          if [ -f "./dist/src/main.js" ]; then
            echo "Build artifact exists"
          else
            echo "Build artifact not found"
            exit 1
          fi
          docker rm temp_container

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Pulling latest Docker image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/medi-recruit:latest

            echo "Stopping and removing existing container if it exists..."
            docker stop medi-recruit 2>/dev/null || true
            docker rm medi-recruit 2>/dev/null || true

            echo "Starting new container..."
            docker run -d --name medi-recruit \
              -p 3000:3000 \
              -e NODE_ENV=production \
              -e HASHED_API_KEY="${{ secrets.HASHED_API_KEY }}" \
              -e DATABASE_HOST="${{ secrets.DATABASE_HOST }}" \
              -e DATABASE_PORT="${{ secrets.DATABASE_PORT }}" \
              -e DATABASE_USER="${{ secrets.DATABASE_USER }}" \
              -e DATABASE_PASSWORD="${{ secrets.DATABASE_PASSWORD }}" \
              -e DATABASE_NAME="${{ secrets.DATABASE_NAME }}" \
              -e SSL_CERTIFICATE_S3_BUCKET="${{ secrets.SSL_CERTIFICATE_S3_BUCKET }}" \
              -e SSL_CERTIFICATE_S3_KEY="${{ secrets.SSL_CERTIFICATE_S3_KEY }}" \
              -e SMTP_SERVICE="${{ secrets.SMTP_SERVICE }}" \
              -e SMTP_SECURE="${{ secrets.SMTP_SECURE }}" \
              -e SMTP_HOST="${{ secrets.SMTP_HOST }}" \
              -e SMTP_PORT="${{ secrets.SMTP_PORT }}" \
              -e SMTP_USER="${{ secrets.SMTP_USER }}" \
              -e SMTP_PASS="${{ secrets.SMTP_PASS }}" \
              -e AWS_REGION="${{ secrets.AWS_REGION }}" \
              -e AWS_ACCESS_KEY_ID="${{ secrets.AWS_ACCESS_KEY_ID }}" \
              -e AWS_SECRET_ACCESS_KEY="${{ secrets.AWS_SECRET_ACCESS_KEY }}" \
              ${{ secrets.DOCKER_USERNAME }}/medi-recruit:latest

            echo "New container started. Current running containers:"
            docker ps

            echo "Checking NestJS application logs:"
            docker logs medi-recruit

            echo "Cleaning up unused Docker images and containers..."
            docker system prune -af --volumes

      - name: Verify NestJS Application
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Checking NestJS application status:"
            for i in {1..5}; do
              if curl -f http://localhost:3000/hello; then
                echo "NestJS application is running and healthy."
                exit 0
              else
                echo "Health check failed. Retrying in 10 seconds..."
                sleep 10
              fi
            done
            echo "NestJS application health check failed after 5 attempts."
            echo "Checking container logs:"
            docker logs medi-recruit
            exit 1
